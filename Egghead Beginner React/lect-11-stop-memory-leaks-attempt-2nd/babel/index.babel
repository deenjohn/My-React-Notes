class StopWatch extends React.Component {
   
  constructor(props) {
    super(props);
    this.state = {lapse : 0 , running : false };
    this.handleRunClick = this.handleRunClick.bind(this);
    this.handleClearClick = this.handleClearClick.bind(this)
    
  }
  
  //will remove the memory leak
  componentWillUnmount(){
    console.log('unmount')
     clearInterval(this.timer)
  }
  
    handleRunClick () {
      this.setState(state =>{
        if(state.running){
          clearInterval(this.timer)
        }else{
            const startTime = Date.now() - this.state.lapse ;
            console.log('startTime ',startTime)
            this.timer = setInterval( () =>{
            this.setState({lapse : Date.now() - startTime})  
           })
        }
        return {running : !state.running} //setstate
      })
   }
  
  handleClearClick () { 
       clearInterval(this.timer)
       this.setState({lapse : 0 , running : false})
   }
   
   render() {
     const {lapse , running} = this.state ;
       return (
      <div className = 'container'>   
       <label  
         style={{fontSize :'5em' ,display : 'block'}}
         > 
         {lapse}ms 
        </label>
        
      <button onClick={this.handleRunClick}>
        {running ? 'Stop' : 'Start'}
      </button>
       <button onClick={this.handleClearClick}>
        Clear
      </button>
        </div>
    );
  }
}

  class StopwatchRender extends React.Component {
    
    constructor(props) {
        super(props);
        this.state = {renderStopWatch : true };
        this.handleChildUnmount = this.handleChildUnmount.bind(this);
        this.handleChange =  this.handleChange.bind(this)
        
      }
    
    handleChange(){
      this.setState(prevState => ({ 
         renderStopWatch  : !prevState.renderStopWatch 
      }));
    }
    handleChildUnmount(){
       console.log('handleChildUnmount');
        this.setState(prevState => ({ 
         renderStopWatch  : !prevState.renderStopWatch 
      }));
        
    }
    
    render(){
     
      return(  
          <div className ="check"> 
             <input onChange ={this.handleChange} 
           type="checkbox" name="stopwatch-checker" value="stopwatch-checker" />
           Render Stopwatch
          <br/>
            {this.state.renderStopWatch ? <StopWatch unmountMe ={this.handleChildUnmount}/> : null }
        </div>
        
      )
    }
  }

ReactDOM.render(
         <StopwatchRender /> 
    ,
    document.getElementById('root')
);





  
  